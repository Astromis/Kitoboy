version: '3.3'

services:

  brocker:
    container_name: 'brocker'
    image: redis
    ports:
      - 6379:6379

  db:
    image: 'postgres:9.6.6-alpine'
    container_name: 'db'
    env_file:
      - env/env.env
    ports:
      - 5432:5432
    # The `volumes` tag allows us to share a folder with our container.
    # Its syntax is as follows: [folder path on our machine]:[folder path to retrieve in the container]
    volumes:
      # In this example, we share the folder `db-data` in our root repository, with the default PostgreSQL data path.
      # It means that every time the repository is modifying the data inside
      # `/var/lib/postgresql/data/`, automatically the change will appear in `db-data`.
      # You don't need to create the `db-data` folder. Docker Compose will do it for you.
      - db-data/:/var/lib/postgresql/data/

  app:
    container_name: 'app'
    # restart: always
    build:
      context: .
      dockerfile: .docker/Dockerfile
    image: 'kitoboy_app:1.0'
    env_file:
      - env/env.env
    ports:
      - 8001:8000
    volumes:
      - ./:/var/www/kitoboy_service/backend
    depends_on:
      - brocker
      - db

  worker:
    container_name: 'worker'
    image: 'kitoboy_app:1.0'
    env_file:
      - env/env.env
    command: /bin/sh -c "scripts/start_celeryworker.sh"
    volumes:
      - ./:/var/www/kitoboy_service/backend
    depends_on:
      - brocker
      - db

  scheduler:
    container_name: 'scheduler'
    image: 'kitoboy_app:1.0'
    env_file:
      - env/env.env
    command: /bin/sh -c "scripts/start_celerybeat.sh"
    volumes:
      - ./:/var/www/kitoboy_service/backend
    depends_on:
      - brocker
      - db

  flower:
    container_name: 'flower'
    image: 'kitoboy_app:1.0'
    env_file:
      - env/env.env
    ports:
      - 5555:5555
    command: /bin/sh -c "scripts/start_flower.sh"
    volumes:
      - ./:/var/www/kitoboy_service/backend
    depends_on:
      - brocker
      - db

volumes:
  db-data:





